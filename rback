#!/bin/bash
# A generic, local, rsync-based, backup and restore script

help_print () {
  echo ""${0##*/}" - a generic, local, rsync-based, backup and restore script
  -r, --repo    - repository select                     : -R repository new
  -i, --include - include list add files, folders...    : -I include list edit
  -e, --exclude - exclude list add files, folders...    : -E exclude list edit
  -x, --xecute  - execute a: restore, backup, or diff
  = overrides  =
  -c, --confdir - configuration dir. from livecd, e.g.  : -C configuration edit
  -s, --srcdir  - source directory,  alternate specify
  -d, --dstdir  - destination dir.,  alternate specify
  -j, --justdo  - no confirm"; }

# Usage display if no parameters given
[ $# = 0 ] && help_print && exit

# Option parsing
opts="$(getopt -n "$(basename $0)" --options r:i:e:x:R:IECc:s:d:jh    \
 --longoptions repo:,include:,exclude:,xecute:                        \
 --longoptions Reponew:,Incedit,Excedit,Cfgedit                       \
 --longoptions confdir:,srcdir:,dstdir:,justdo,help                   \
 -- "$@")"
[ $? != 0 ] && exit 1
eval set -- "$opts"

while [ "$1" != "--" ]; do
  case "$1" in
    -r | --repo    ) repo="$2"   ; shift 2 ;;
    -i | --include ) include="$2"; shift 2 ;;
    -e | --exclude ) exclude="$2"; shift 2 ;;
    -x | --xecute  ) xecute="$2" ; shift 2 ;;
    # = blunt versions =
    -R | --Reponew ) Reponew="$2"; shift 2 ;;
    -I | --Incedit ) Incedit=y   ; shift   ;;
    -E | --Excedit ) Excedit=y   ; shift   ;;
    -C | --Cfgedit ) Cfgedit=y   ; shift   ;;
    # = overrides =
    -c | --confdir ) confdir="$2"; shift 2 ;;
    -s | --srcdir  ) srcdir="$2" ; shift 2 ;;
    -d | --dstdir  ) dstdir="$2" ; shift 2 ;;
    -j | --justdo  ) justdo="$2" ; shift 2 ;;
    # =
    -h | --help   ) help_print; exit 0     ;;
    * ) break ;;
  esac; done
shift

# --confdir
if [ "$confdir" ]; then
  confdir="$(echo "$confdir" | sed 's#/$##g')"
  config="$confdir"/config
  if [ -f "$config" ]; then
    source "$config" && \
    echo "conf-alternat: sourced"
  else
    echo "conf-nonexist: "$config""
    exit 1; fi
# $confdir
else
  confdir="${XDG_CONFIG_HOME:-$HOME/.config}/rback"
  config="$confdir"/config
  if [ -f "$config" ]; then
    source "$config"
  # configuration create if non-existent
  else
    [ ! -d "$confdir" ] && \
    mkdir -p "$confdir" && \
    echo "cnfdir-creatd: "$confdir""
echo '# rback configuration file

# Editors
editor="${EDITOR}"
eddiff="vimdiff"

# Backup name
host=amiga
date="$(date +%F)"
bckname="$host"_"$date"_"$repo"

# Repository directories (add with -R)
# b{src,dsp}= backup {source, dest. parent}; r{srp,dst}= restore{src par, dest.} 

# vim: set noet syn=conf:' > "$config" && \
     echo "config-creatd: "$config""
     echo "config-creatd: configuration can be edited with '-C'"
  exit 1; fi; fi

# --Reponew: repository build new 
if [ "$Reponew" ]; then
  if grep -q ^"$host"_"$Reponew"_* "$config"; then
    echo "repo-existant: "$Reponew""
    exit 1
  else
    # trim config: vim file desc., trailing lines
    { sed -i '/# vim: set noet syn=conf:/d' "$config"
    while [ "$(tail -n1 "$config")" = "" ]; do sed -i '$d' "$config"; done
    # addto config: repository name, vim file desc.
    for repodirvar in "$host"_"$Reponew"_{bsrc,bdsp}=\"\" \
      "$host"_"$Reponew"_{rsrp,rdst}=\"\"; do
      echo "$repodirvar" >> "$config"; done
    echo -e "\n# vim: set noet syn=conf:" >> "$config"; } && \
    echo "reponewcreatd: \""$Reponew"\""
    echo "reponewcreatd: Edit config. to define backup/restore directories."
    exit 0; fi; fi

# Option error test: --repo required for most options
if [ "$include$exclude$xecute$Incedit$Excedit$srcdir$dstdir" -a ! "$repo" ];then
  echo "options-error: --repo option required for one or more given option"
  exit 1; fi

# Option error test: --xecute needed for --justdo
if [ "$justdo" ] && [ ! "$xecute" ]; then
  echo "options-error: --xecute option required for --justdo option"
  exit 1; fi

# Option error test: --xecute needed for --srcdir and --dstdir
if [ "$srcdir$dstdir" ] && [ ! "$xecute" ]; then
  echo "options-error: --xecute option required for --srcdir and --dstdir" \
    "option"
  exit 1; fi

# Option error test: --xecute must be either: backup, restore, or diff
if [ "$xecute" ]; then
  if ! [ "$xecute" = backup -o "$xecute" = restore -o "$xecute" = diff ]; then
    echo "options-error: --xecute argument invalid; backup, restore, or diff"
    exit 1; fi; fi

# --repo: repository validity test
if [ "$repo" ]; then
  # repo. variables validity test
  for repovar in "$host"_"$repo"_b{src,dsp} "$host"_"$repo"_r{srp,dst}; do
    grep -q ^"$repovar"= "$config" || repovar_error=y; done
  # repo. non-valid
  if [ "$repovar_error" ]; then
    echo "repo-nonvalid: "$repo""
    # repo variables parse from config
    repo_names=$(grep -o -P \
      "(?<="$host"_).*(?=_[b,r][s,d][r,s][c,p,t])" "$config")
    # repo variables validity test
    for uniq in $(echo "$repo_names" | uniq); do
      for repovar in "$host"_"$uniq"_b{src,dsp} "$host"_"$uniq"_r{srp,dst}; do
        if ! grep -q ^"$repovar"= "$config"; then
          continue; fi; done
        echo "repo-varvalid: "$uniq""; done
    exit 1; fi; fi

# --Cfgedit: configuration edit
if [ "$Cfgedit" ]; then
  "$editor" "$config"; fi

# --include, --exclude: file locations
inclist="$confdir"/"$host"_"$repo"_inc.txt
exclist="$confdir"/"$host"_"$repo"_exc.txt
[ ! -f "$inclist" ] && touch "$inclist"
[ ! -f "$exclist" ] && touch "$exclist"

# --include: include list addition
if [ "$include" ]; then
  for file in ${include[@]}; do
    # file existence test
    if [ ! -e "$file" ]; then
      echo "incl-nonexist: "$file""
      incl_nonexist=y; fi; done
  [ "$incl_nonexist" ] && exit 1
  # add, sort, and erase dups
  for file in ${include[@]}; do
    filepath="$(realpath -s "$file")"
    [ -d "$file" ] && filepath="$filepath/" # directories require trailing /
    # entry pre-existence test
    if grep -xq "$filepath" "$inclist"; then
      echo "include-duppd: "$file""
      continue; fi
    echo "$filepath" >> "$inclist" && \
    echo "include-added: "$file""; done
  sort -u "$inclist" -o "$inclist"; fi

# --Incedit: include list edit
if [ "$Incedit" ]; then
  "$editor" "$inclist"; fi

# --exclude: exclude list addition
if [ "$exclude" ]; then
  for file in ${exclude[@]}; do
    # file existence test
    if [ ! -e "$file" ]; then
      echo "excl-nonexist: "$file""
      excl_nonexist=y; fi; done
  [ "$excl_nonexist" ] && exit 1
  # add, sort, and erase dups
  for file in ${exclude[@]}; do
    filepath="$(realpath -s "$file")"
    [ -d "$file" ] && filepath="$filepath/"
    # entry pre-existence test
    if grep -xq "$filepath" "$exclist"; then
      echo "exclude-duppd: "$file""
      continue; fi
    echo "$filepath" >> "$exclist" && \
    echo "exclude-added: "$file""; done
  sort -u "$exclist" -o "$exclist"; fi

# --exclude: exclude list edit
if [ "$Excedit" ]; then
  "$editor" "$exclist"; fi

# --include, --exclude list validity tests
if [ "$xecute" = "backup" -o "$xecute" = "restore" -o "$xecute" = "diff" ]; then
  # inclist entry existence test
  if [ ! -s "$inclist" ]; then
    echo "inclist-error: include list has no entries"
    exit 1; fi
  # inclist entry validity test
  while IFS= read -r line; do
    if [ -e "$line" ]; then
      inclist_valid=y
    else
      echo "incl-nonexist: "$line""; fi; done < "$inclist"
  # inclist entry validity total failure (< 1)
  if [ ! "$inclist_valid" ]; then
    echo "inclist-error: include list has no valid entries"
    exit 1
  fi
  # exclist entry validity test
  while IFS= read -r line; do
    if [ ! -e "$line" ]; then
      echo "excl-nonexist: "$line""; fi; done < "$exclist"; fi

# Non-root user: define sudo
[ $EUID != 0 ] && sudo=sudo

# --xecute backup
if [ "$xecute" = "backup" ]; then
  # --srcdir
  if [ "$srcdir" ]; then
    if [ ! -d "$srcdir" ]; then
      echo "srcdirnonexst: "$srcdir"" && exit 1
    else
      echo "srcdirexistnt: "$srcdir""; fi
  # $srcdir
  else
    srcdir="$host"_"$repo"_bsrc
    srcdir=$(echo ${!srcdir})   # ! indirect parameter expansion
    # existence test
    if [ ! -d "$srcdir" ]; then
      echo "srcdirnonexst: "$srcdir"" && exit 1
    else
      echo "srcdirexistnt: "$srcdir""; fi; fi
  # --dstdir
  if [ "$dstdir" ]; then
    if [ ! -d "$dstdir" ]; then
      echo "dstdirnonexst: "$dstdir"" && exit 1
    else
      echo "dstdirexistnt: "$dstdir""; fi
  # $dspdir
  else
    # configuration file value associate
    dspdir="$host"_"$repo"_bdsp
    dspdir=$(echo ${!dspdir})
    [ ! -d "$dspdir" ] && echo "dspdirnonexst: "$dspdir"" && exit 1
    # $dstdir define, mkdir
    dstdir="$dspdir"/"$bckname"
    if [ -d "$dstdir" ]; then
      echo "dstdirexistnt: "$dstdir""
    else
      if [ ! -w "$dspdir" ]; then
        $sudo mkdir -p "$dstdir" && echo "dstdircreated: "$dstdir""
      else
        mkdir -p "$dstdir" && echo "dstdircreated: "$dstdir""; fi; fi; fi
  # Backup
  rsynclog=/var/log/"$host"_"$date"_"$repo".log
  while true; do
    # no confirm
    if [ "$justdo" ]; then
      yn=y
    # prompt
    else
      read -p "Exec. backup?: " yn; fi
    case $yn in
      [Yy] ) $sudo sh -c "rsync \
               --archive --recursive --relative --xattrs --acls  \
               --delete-during --delete-excluded                 \
               --info=progress2 --human-readable                 \
               --files-from="$inclist" --exclude-from="$exclist" \
               "$srcdir"/./ "$dstdir" 2> "$rsynclog""
               [ -s "$rsynclog" ] && echo "errorloglocal: "$rsynclog""
             break ;;
      [Nn] ) break ;;
      *    ) echo "  Answer 'y' for yes, 'n' for no."
    esac
  done; fi

# --xecute restore
if [ "$xecute" = "restore" ]; then
  # --srcdir
  if [ "$srcdir" ]; then
    if [ ! -d "$srcdir" ]; then
      echo "srcdirnonexst: "$srcdir"" && exit 1
    else
      echo "srcdirexistnt: "$srcdir""; fi
  # $srpdir
  else
    # configuration file value assosciate
    srpdir="$host"_"$repo"_rsrp
    srpdir=$(echo ${!srpdir})
    # $srpdir existence test
    [ ! -d "$srpdir" ] && echo "srpdir-noexst: "$srpdir"" && exit 1
    # $srcdir, define via prompt
    srcdirs="$(find "$srpdir"/* -maxdepth 0 -type d -name "${host}*${repo}*")"
    # $srcdirs existence test
    [ ! "$srcdirs" ]   && echo "srcdir-noexst: no source dirs found" && exit 1
    echo "Select restore source directory:"
    select srcdir in $srcdirs ; do
      test -n "$srcdir" && break
      echo "Select 1, 2, ..."; done; fi
  # --dstdir
  if [ "$dstdir" ]; then
    if [ ! -d "$dstdir" ]; then
      echo "dstdirnonexst: "$dstdir"" && exit 1
    else
      echo "dstdirexistnt: "$dstdir""; fi
  # $dstdir
  else
    dstdir="$host"_"$repo"_rdst
    dstdir=$(echo ${!dstdir})
    # existence test
    if [ ! -d "$dstdir" ]; then
      echo "dstdirnonexst: "$dstdir"" && exit 1
    else
      echo "srcdirexistnt: "$srcdir""
      echo "dstdirexistnt: "$dstdir""; fi; fi
  # Restore
  rsynclog=/var/log/"$host"_"$date"_"$repo".log
  while true; do
    # no confirm
    if [ "$justdo" ]; then
      yn=y
    # prompt
    else
      read -p "Exec restore?: " yn; fi
    case $yn in
      [Yy] ) $sudo sh -c "rsync \
               --archive --recursive --relative --xattrs --acls  \
               --delete-during --delete-excluded                 \
               --info=progress2 --human-readable                 \
               --files-from="$inclist" --exclude-from="$exclist" \
               "$srcdir"/./ "$dstdir" 2> "$rsynclog""
               [ -s "$rsynclog" ] && echo "errorloglocal: "$rsynclog""
             break ;;
      [Nn] ) break ;;
      *    ) echo "  Answer 'y' for yes, 'n' for no."
    esac
  done; fi

# --xecute diff
if [ "$xecute" = "diff" ]; then
  # --srcdir
  if [ "$srcdir" ]; then
    if [ ! -d "$srcdir" ]; then
      echo "srcdirnonexst: "$srcdir"" && exit 1
    else
      echo "srcdirexistnt: "$srcdir""; fi
  # $srpdir
  else
    # configuration file value assosciate
    srpdir="$host"_"$repo"_rsrp
    srpdir=$(echo ${!srpdir})
    # $srpdir existence test
    [ ! -d "$srpdir" ] && echo "srpdir-noexst: "$srpdir"" && exit 1
    # $srcdir, define via prompt
    srcdirs="$(find "$srpdir"/* -maxdepth 0 -type d -name "${host}*${repo}*")"
    # $srcdirs existence test
    [ ! "$srcdirs" ]   && echo "srcdir-noexst: no source dirs found" && exit 1
    echo "Select diff source directory:"
    select srcdir in $srcdirs ; do
      test -n "$srcdir" && break
      echo "Select 1, 2, ..."; done; fi
  # --dstdir
  if [ "$dstdir" ]; then
    if [ ! -d "$dstdir" ]; then
      echo "dstdirnonexst: "$dstdir"" && exit 1
    else
      echo "dstdirexistnt: "$dstdir""; fi
  # $dstdir
  else
    dstdir="$host"_"$repo"_rdst
    dstdir=$(echo ${!dstdir})
    # existence test
    if [ ! -d "$dstdir" ]; then
      echo "dstdirnonexst: "$dstdir"" && exit 1
    else
      echo "srcdirexistnt: "$srcdir""
      echo "dstdirexistnt: "$dstdir""; fi; fi
  # Diff
  while true; do
    # no confirm
    if [ "$justdo" ]; then
      yn=y
    # prompt
    else
      read -p "Execute diff?: " yn; fi
    case $yn in
      [Yy] )
        for fileline in $(cat "$inclist"); do
          srcfile="$srcdir"/"$fileline"
          dstfile="$dstdir"/"$fileline"
          # Source file existant test
          if [ -f "$srcfile" ]; then
            # Files match: continue
            if diff "$srcfile" "$dstfile" &> /dev/null; then
              echo "diff-matchon: "$fileline""
              continue; fi
            # Destination write test, sudo call if necessary, diff
            if [ ! -w "$dstfile" -o ! -w $(dirname "$dstfile") ]; then
              $sudo "$eddiff" "$srcfile" "$dstfile"; wait
            else
                    "$eddiff" "$srcfile" "$dstfile"; wait; fi;
          else
            continue; fi; done; break ;;
      [Nn] ) break ;;
      *    ) echo "  Answer 'y' for yes, 'n' for no."
    esac
  done; fi